<project basedir="." name="build_common">

<!-- ====================================================================== -->
<!-- ==========  Initialize the Build Environment  ======================== -->
<!-- ====================================================================== -->

  <property file="${user.home}/build.properties" />
  <echo message="Basedir - ${basedir}"/>
  <echo message="Version - ${toobs.version}"/>

  <!-- Then build specific properties. -->
  <property file="${basedir}/build.properties"/>

  <!-- setup common properties -->
  <property name="platform.staging.home" value="${basedir}/../../../toobs-core-${toobs.version}"/>

  <target name="init" description="Initialize environment"  depends="project_init">

    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property name="gensrc"               value="${platform.staging.home}/gensrc/${component.name}"/>
    <property name="build.home"           value="${platform.staging.home}/out/${component.name}"/>
    <property name="build.compiler"       value="javac1.5" />
    <property name="test.build.home"      value="${platform.staging.home}/test/${component.name}"/>

    <property name="dist.home"            value="${platform.staging.home}/image"/>
    <property name="javadoc.platform.dir" value="${platform.staging.home}/image/doc"/>
    <property name="javadoc.dir"          value="${javadoc.platform.dir}/${component.name}"/>
    <property name="source.home"          value="src"/>
    <property name="source.path"          value="${source.home}"/>
    <property name="source.test"          value="test"/>

    <property name="compile.dest"         value="${build.home}/classes"/>
    <property name="compile.debug"        value="on"/>
    <property name="compile.deprecation"  value="true"/>
    <property name="compile.optimize"     value="on"/>

    <!-- This is the Name of the Component Jar -->
    <property name="component.jar"        value="${component.name}.jar"/>
    <property name="component.jar.name"   value="${dist.home}/lib/${component.jar}"/>

    <!-- Setup Compile ClassPath -->
    <path id="lib.classpath">
      <pathelement location="${build.home}/classes"/>
      <fileset dir="../../third">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="../lib">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${dist.home}">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Setup Javadoc ClassPath -->
    <path id="javadoc.path">
      <pathelement path="${source.path}"/>
      <pathelement path="${gensrc}/src"/>
    </path>

    <available property="hasConfig" file="${source.home}" />
  </target>


<!-- ====================================================================== -->
<!-- === Project prepare target, which is empty in base, will be ========== -->
<!-- === overridden in derived build file                        ========== -->
<!-- ====================================================================== -->
  <target name="project_prepare" description="Platform- Component level prepare phase"  />

  <target name="prepare" depends="init,project_prepare" description="Prepare build directory" >
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.home}/classes"/>
    <mkdir dir="${test.build.home}/classes"/>
    <mkdir dir="${dist.home}/lib"/>
    <mkdir dir="${gensrc}"/>
    <mkdir dir="${gensrc}/src"/>
  </target>

  <target name="compile" depends="prepare" description="Compile source" if="hasConfig" >
    <echo message="Compiling with optimize ${compile.optimize} and debug ${compile.debug}" level="info" />
    <javac debug="${compile.debug}" deprecation="${compile.deprecation}"
      destdir="${compile.dest}" target="1.5"
      optimize="${compile.optimize}" srcdir="${source.path}" >
      <classpath refid="lib.classpath"/>
    </javac>
    <copy todir="${build.home}/classes" failonerror="false">
      <fileset dir="${source.home}">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
      </fileset>
      <fileset dir="${gensrc}/src">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
      </fileset>
    </copy>

  </target>


<!-- ====================================================================== -->
<!-- === Project clean target, which is empty in base, will be ============ -->
<!-- === overridden in derived build file                        ========== -->
<!-- ====================================================================== -->
  <target name="project_clean" description="Project-level prepare phase" />

  <target name="clean" depends="init,project_clean" description="Wipeout all generated files" >
    <delete dir="${build.home}"/>
    <delete file="${dist.home}/lib/${component.jar.name}"/>
    <delete dir="${javadoc.dir}"/>
    <delete dir="${gensrc}"/>
    <delete dir="${test.build.home}"/>
  </target>

  <target name="javadoc" depends="init" description="Create component Javadoc documentation" >
    <mkdir dir="${javadoc.dir}"/>
    <javadoc author="true"
             destdir="${javadoc.dir}"
             source="1.5"
             access="public"
             windowtitle="${component.title}" failonerror="false">
      <classpath>
        <path refid="lib.classpath" />
      </classpath>
      <fileset dir="${gensrc}/src" defaultexcludes="true" >
       <include name="com/**/*.java"/>
      </fileset>
      <fileset dir="${source.home}" defaultexcludes="true" >
        <include name="com/**/*.java"/>
      </fileset>
      <doctitle><![CDATA[${component.title}]]></doctitle>
      <header><![CDATA[<b>${component.title}<sp><sp><b>]]></header>
      <bottom><![CDATA[<i><font size=-1>Copyright &copy; 2008 Toobs<font><i>]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
    </javadoc>
  </target>

  <target name="build-test" depends="compile" >
    <javac debug="${compile.debug}" deprecation="${compile.deprecation}"
              destdir="${test.build.home}/classes" target="1.4" source="1.4"
              optimize="${compile.optimize}" srcdir="${source.test}">
      <classpath refid="lib.classpath"/>
    </javac>
  </target>

  <target name="jar" depends="init" description="Create binary distribution" >
    <mkdir dir="${dist.home}/lib"/>
    <jar basedir="${compile.dest}" jarfile="${component.jar.name}" >
      <include name="**/*"/>
    </jar>
  </target>

  <target name="dist" depends="compile,jar" description="Build the Component distribution package">
  	
  </target>
  
  <target name="project_init" description="target stub"/>

</project>
